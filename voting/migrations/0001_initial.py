# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-13 17:19
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(null=True)),
            ],
            options={
                'db_table': 'category',
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'entity',
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(null=True)),
                ('entity', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group', to='voting.Entity')),
            ],
            options={
                'db_table': 'group',
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
            },
        ),
        migrations.CreateModel(
            name='Nominate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='voting.Category')),
                ('nominator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('nominee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='voting.Entity')),
            ],
            options={
                'db_table': 'nominate',
                'verbose_name': 'Nomination',
                'verbose_name_plural': 'Nominations',
            },
        ),
        migrations.CreateModel(
            name='Nominee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes', models.IntegerField(default=0)),
                ('nominations', models.IntegerField(default=0)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='voting.Category')),
                ('entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='voting.Entity')),
            ],
            options={
                'db_table': 'nominee',
                'verbose_name': 'Nominee',
                'verbose_name_plural': 'Nominees',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ci', models.CharField(max_length=200, null=True, unique=True, validators=[django.core.validators.RegexValidator(regex='^([0-9])+$')])),
                ('name', models.CharField(max_length=200)),
                ('surname', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('status', models.CharField(max_length=20, null=True)),
                ('entity', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person', to='voting.Entity')),
            ],
            options={
                'db_table': 'person',
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator(regex='^([0-9]){2}-([0-9]){5}$')])),
                ('career', models.CharField(max_length=200)),
                ('person', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student', to='voting.Person')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student',
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes', models.IntegerField(default=0)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='voting.Category')),
                ('entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='voting.Entity')),
            ],
            options={
                'db_table': 'winner',
                'verbose_name': 'Winner',
                'verbose_name_plural': 'Winners',
            },
        ),
        migrations.AlterUniqueTogether(
            name='winner',
            unique_together=set([('entity', 'category')]),
        ),
        migrations.AlterUniqueTogether(
            name='nominee',
            unique_together=set([('entity', 'category')]),
        ),
        migrations.AlterUniqueTogether(
            name='nominate',
            unique_together=set([('nominator', 'nominee', 'category')]),
        ),
    ]
